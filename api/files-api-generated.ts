/* tslint:disable */
/* eslint-disable */
/*
1Password Connect

REST API interface for 1Password Connect.

The version of the OpenAPI document: 1.5.7
Contact: support@1password.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * FilesApi - axios parameter creator
 * @export
 */
export const FilesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all the files inside an Item
         * @param {string} vaultUuid The UUID of the Vault to fetch Items from
         * @param {string} itemUuid The UUID of the Item to fetch files from
         * @param {boolean} [inlineFiles] Tells server to return the base64-encoded file contents in the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllFilesInsideItem: async (vaultUuid: string, itemUuid: string, inlineFiles?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultUuid' is not null or undefined
            assertParamExists('getAllFilesInsideItem', 'vaultUuid', vaultUuid)
            // verify required parameter 'itemUuid' is not null or undefined
            assertParamExists('getAllFilesInsideItem', 'itemUuid', itemUuid)
            const localVarPath = `/vaults/{vaultUuid}/items/{itemUuid}/files`
                .replace(`{${"vaultUuid"}}`, encodeURIComponent(String(vaultUuid !== undefined ? vaultUuid : `-vaultUuid-`)))
                .replace(`{${"itemUuid"}}`, encodeURIComponent(String(itemUuid !== undefined ? itemUuid : `-itemUuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ConnectToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (inlineFiles !== undefined) {
                localVarQueryParameter['inline_files'] = inlineFiles;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/vaults/{vaultUuid}/items/{itemUuid}/files',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the content of a File
         * @param {string} vaultUuid The UUID of the Vault the item is in
         * @param {string} itemUuid The UUID of the Item the File is in
         * @param {string} fileUuid UUID of the file to get content from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContent: async (vaultUuid: string, itemUuid: string, fileUuid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultUuid' is not null or undefined
            assertParamExists('getContent', 'vaultUuid', vaultUuid)
            // verify required parameter 'itemUuid' is not null or undefined
            assertParamExists('getContent', 'itemUuid', itemUuid)
            // verify required parameter 'fileUuid' is not null or undefined
            assertParamExists('getContent', 'fileUuid', fileUuid)
            const localVarPath = `/vaults/{vaultUuid}/items/{itemUuid}/files/{fileUuid}/content`
                .replace(`{${"vaultUuid"}}`, encodeURIComponent(String(vaultUuid !== undefined ? vaultUuid : `-vaultUuid-`)))
                .replace(`{${"itemUuid"}}`, encodeURIComponent(String(itemUuid !== undefined ? itemUuid : `-itemUuid-`)))
                .replace(`{${"fileUuid"}}`, encodeURIComponent(String(fileUuid !== undefined ? fileUuid : `-fileUuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ConnectToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/vaults/{vaultUuid}/items/{itemUuid}/files/{fileUuid}/content',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the details of a File
         * @param {string} vaultUuid The UUID of the Vault to fetch Item from
         * @param {string} itemUuid The UUID of the Item to fetch File from
         * @param {string} fileUuid The UUID of the File to fetch
         * @param {boolean} [inlineFiles] Tells server to return the base64-encoded file contents in the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileDetails: async (vaultUuid: string, itemUuid: string, fileUuid: string, inlineFiles?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultUuid' is not null or undefined
            assertParamExists('getFileDetails', 'vaultUuid', vaultUuid)
            // verify required parameter 'itemUuid' is not null or undefined
            assertParamExists('getFileDetails', 'itemUuid', itemUuid)
            // verify required parameter 'fileUuid' is not null or undefined
            assertParamExists('getFileDetails', 'fileUuid', fileUuid)
            const localVarPath = `/vaults/{vaultUuid}/items/{itemUuid}/files/{fileUuid}`
                .replace(`{${"vaultUuid"}}`, encodeURIComponent(String(vaultUuid !== undefined ? vaultUuid : `-vaultUuid-`)))
                .replace(`{${"itemUuid"}}`, encodeURIComponent(String(itemUuid !== undefined ? itemUuid : `-itemUuid-`)))
                .replace(`{${"fileUuid"}}`, encodeURIComponent(String(fileUuid !== undefined ? fileUuid : `-fileUuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ConnectToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (inlineFiles !== undefined) {
                localVarQueryParameter['inline_files'] = inlineFiles;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/vaults/{vaultUuid}/items/{itemUuid}/files/{fileUuid}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilesApi - functional programming interface
 * @export
 */
export const FilesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FilesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get all the files inside an Item
         * @param {FilesApiGetAllFilesInsideItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllFilesInsideItem(requestParameters: FilesApiGetAllFilesInsideItemRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<any>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllFilesInsideItem(requestParameters.vaultUuid, requestParameters.itemUuid, requestParameters.inlineFiles, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the content of a File
         * @param {FilesApiGetContentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContent(requestParameters: FilesApiGetContentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Uint8Array | File | buffer.File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContent(requestParameters.vaultUuid, requestParameters.itemUuid, requestParameters.fileUuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the details of a File
         * @param {FilesApiGetFileDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFileDetails(requestParameters: FilesApiGetFileDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFileDetails(requestParameters.vaultUuid, requestParameters.itemUuid, requestParameters.fileUuid, requestParameters.inlineFiles, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FilesApi - factory interface
 * @export
 */
export const FilesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FilesApiFp(configuration)
    return {
        /**
         * 
         * @summary Get all the files inside an Item
         * @param {FilesApiGetAllFilesInsideItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllFilesInsideItem(requestParameters: FilesApiGetAllFilesInsideItemRequest, options?: AxiosRequestConfig): AxiosPromise<Array<any>> {
            return localVarFp.getAllFilesInsideItem(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the content of a File
         * @param {FilesApiGetContentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContent(requestParameters: FilesApiGetContentRequest, options?: AxiosRequestConfig): AxiosPromise<Uint8Array | File | buffer.File> {
            return localVarFp.getContent(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the details of a File
         * @param {FilesApiGetFileDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileDetails(requestParameters: FilesApiGetFileDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getFileDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAllFilesInsideItem operation in FilesApi.
 * @export
 * @interface FilesApiGetAllFilesInsideItemRequest
 */
export type FilesApiGetAllFilesInsideItemRequest = {
    
    /**
    * The UUID of the Vault to fetch Items from
    * @type {string}
    * @memberof FilesApiGetAllFilesInsideItem
    */
    readonly vaultUuid: string
    
    /**
    * The UUID of the Item to fetch files from
    * @type {string}
    * @memberof FilesApiGetAllFilesInsideItem
    */
    readonly itemUuid: string
    
    /**
    * Tells server to return the base64-encoded file contents in the response.
    * @type {boolean}
    * @memberof FilesApiGetAllFilesInsideItem
    */
    readonly inlineFiles?: boolean
    
}

/**
 * Request parameters for getContent operation in FilesApi.
 * @export
 * @interface FilesApiGetContentRequest
 */
export type FilesApiGetContentRequest = {
    
    /**
    * The UUID of the Vault the item is in
    * @type {string}
    * @memberof FilesApiGetContent
    */
    readonly vaultUuid: string
    
    /**
    * The UUID of the Item the File is in
    * @type {string}
    * @memberof FilesApiGetContent
    */
    readonly itemUuid: string
    
    /**
    * UUID of the file to get content from
    * @type {string}
    * @memberof FilesApiGetContent
    */
    readonly fileUuid: string
    
}

/**
 * Request parameters for getFileDetails operation in FilesApi.
 * @export
 * @interface FilesApiGetFileDetailsRequest
 */
export type FilesApiGetFileDetailsRequest = {
    
    /**
    * The UUID of the Vault to fetch Item from
    * @type {string}
    * @memberof FilesApiGetFileDetails
    */
    readonly vaultUuid: string
    
    /**
    * The UUID of the Item to fetch File from
    * @type {string}
    * @memberof FilesApiGetFileDetails
    */
    readonly itemUuid: string
    
    /**
    * The UUID of the File to fetch
    * @type {string}
    * @memberof FilesApiGetFileDetails
    */
    readonly fileUuid: string
    
    /**
    * Tells server to return the base64-encoded file contents in the response.
    * @type {boolean}
    * @memberof FilesApiGetFileDetails
    */
    readonly inlineFiles?: boolean
    
}

/**
 * FilesApiGenerated - object-oriented interface
 * @export
 * @class FilesApiGenerated
 * @extends {BaseAPI}
 */
export class FilesApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Get all the files inside an Item
     * @param {FilesApiGetAllFilesInsideItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApiGenerated
     */
    public getAllFilesInsideItem(requestParameters: FilesApiGetAllFilesInsideItemRequest, options?: AxiosRequestConfig) {
        return FilesApiFp(this.configuration).getAllFilesInsideItem(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the content of a File
     * @param {FilesApiGetContentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApiGenerated
     */
    public getContent(requestParameters: FilesApiGetContentRequest, options?: AxiosRequestConfig) {
        return FilesApiFp(this.configuration).getContent(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the details of a File
     * @param {FilesApiGetFileDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApiGenerated
     */
    public getFileDetails(requestParameters: FilesApiGetFileDetailsRequest, options?: AxiosRequestConfig) {
        return FilesApiFp(this.configuration).getFileDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
