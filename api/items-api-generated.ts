/* tslint:disable */
/* eslint-disable */
/*
1Password Connect

REST API interface for 1Password Connect.

The version of the OpenAPI document: 1.5.7
Contact: support@1password.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { Field } from '../models';
// @ts-ignore
import { FullItem } from '../models';
// @ts-ignore
import { FullItemAllOfSections } from '../models';
// @ts-ignore
import { Item } from '../models';
// @ts-ignore
import { ItemUrlsInner } from '../models';
// @ts-ignore
import { ItemVault } from '../models';
// @ts-ignore
import { PatchInner } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ItemsApi - axios parameter creator
 * @export
 */
export const ItemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new Item
         * @param {string} vaultUuid The UUID of the Vault to create an Item in
         * @param {FullItem} [fullItem] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewItem: async (vaultUuid: string, fullItem?: FullItem, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultUuid' is not null or undefined
            assertParamExists('createNewItem', 'vaultUuid', vaultUuid)
            const localVarPath = `/vaults/{vaultUuid}/items`
                .replace(`{${"vaultUuid"}}`, encodeURIComponent(String(vaultUuid !== undefined ? vaultUuid : `-vaultUuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ConnectToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: fullItem,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/vaults/{vaultUuid}/items',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(fullItem, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an Item
         * @param {string} vaultUuid The UUID of the Vault the item is in
         * @param {string} itemUuid The UUID of the Item to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemById: async (vaultUuid: string, itemUuid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultUuid' is not null or undefined
            assertParamExists('deleteItemById', 'vaultUuid', vaultUuid)
            // verify required parameter 'itemUuid' is not null or undefined
            assertParamExists('deleteItemById', 'itemUuid', itemUuid)
            const localVarPath = `/vaults/{vaultUuid}/items/{itemUuid}`
                .replace(`{${"vaultUuid"}}`, encodeURIComponent(String(vaultUuid !== undefined ? vaultUuid : `-vaultUuid-`)))
                .replace(`{${"itemUuid"}}`, encodeURIComponent(String(itemUuid !== undefined ? itemUuid : `-itemUuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ConnectToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/vaults/{vaultUuid}/items/{itemUuid}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all items for inside a Vault
         * @param {string} vaultUuid The UUID of the Vault to fetch Items from
         * @param {string} [filter] Filter the Item collection based on Item name using SCIM eq filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll: async (vaultUuid: string, filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultUuid' is not null or undefined
            assertParamExists('getAll', 'vaultUuid', vaultUuid)
            const localVarPath = `/vaults/{vaultUuid}/items`
                .replace(`{${"vaultUuid"}}`, encodeURIComponent(String(vaultUuid !== undefined ? vaultUuid : `-vaultUuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ConnectToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/vaults/{vaultUuid}/items',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the details of an Item
         * @param {string} vaultUuid The UUID of the Vault to fetch Item from
         * @param {string} itemUuid The UUID of the Item to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetailsById: async (vaultUuid: string, itemUuid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultUuid' is not null or undefined
            assertParamExists('getDetailsById', 'vaultUuid', vaultUuid)
            // verify required parameter 'itemUuid' is not null or undefined
            assertParamExists('getDetailsById', 'itemUuid', itemUuid)
            const localVarPath = `/vaults/{vaultUuid}/items/{itemUuid}`
                .replace(`{${"vaultUuid"}}`, encodeURIComponent(String(vaultUuid !== undefined ? vaultUuid : `-vaultUuid-`)))
                .replace(`{${"itemUuid"}}`, encodeURIComponent(String(itemUuid !== undefined ? itemUuid : `-itemUuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ConnectToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/vaults/{vaultUuid}/items/{itemUuid}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an Item
         * @param {string} vaultUuid The UUID of the Item\&#39;s Vault
         * @param {string} itemUuid The UUID of the Item to update
         * @param {FullItem} [fullItem] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItemDetails: async (vaultUuid: string, itemUuid: string, fullItem?: FullItem, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultUuid' is not null or undefined
            assertParamExists('updateItemDetails', 'vaultUuid', vaultUuid)
            // verify required parameter 'itemUuid' is not null or undefined
            assertParamExists('updateItemDetails', 'itemUuid', itemUuid)
            const localVarPath = `/vaults/{vaultUuid}/items/{itemUuid}`
                .replace(`{${"vaultUuid"}}`, encodeURIComponent(String(vaultUuid !== undefined ? vaultUuid : `-vaultUuid-`)))
                .replace(`{${"itemUuid"}}`, encodeURIComponent(String(itemUuid !== undefined ? itemUuid : `-itemUuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ConnectToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: fullItem,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/vaults/{vaultUuid}/items/{itemUuid}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(fullItem, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Applies a modified [RFC6902 JSON Patch](https://tools.ietf.org/html/rfc6902) document to an Item or ItemField. This endpoint only supports `add`, `remove` and `replace` operations.  When modifying a specific ItemField, the ItemField\'s ID in the `path` attribute of the operation object: `/fields/{fieldId}` 
         * @summary Update a subset of Item attributes
         * @param {string} vaultUuid The UUID of the Vault the item is in
         * @param {string} itemUuid The UUID of the Item to update
         * @param {Array<PatchInner>} [patchInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubsetAttributes: async (vaultUuid: string, itemUuid: string, patchInner?: Array<PatchInner>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultUuid' is not null or undefined
            assertParamExists('updateSubsetAttributes', 'vaultUuid', vaultUuid)
            // verify required parameter 'itemUuid' is not null or undefined
            assertParamExists('updateSubsetAttributes', 'itemUuid', itemUuid)
            const localVarPath = `/vaults/{vaultUuid}/items/{itemUuid}`
                .replace(`{${"vaultUuid"}}`, encodeURIComponent(String(vaultUuid !== undefined ? vaultUuid : `-vaultUuid-`)))
                .replace(`{${"itemUuid"}}`, encodeURIComponent(String(itemUuid !== undefined ? itemUuid : `-itemUuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ConnectToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: patchInner,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/vaults/{vaultUuid}/items/{itemUuid}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(patchInner, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ItemsApi - functional programming interface
 * @export
 */
export const ItemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ItemsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new Item
         * @param {ItemsApiCreateNewItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewItem(requestParameters: ItemsApiCreateNewItemRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FullItem>> {
            const fullItem: FullItem = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewItem(requestParameters.vaultUuid, fullItem, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete an Item
         * @param {ItemsApiDeleteItemByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteItemById(requestParameters: ItemsApiDeleteItemByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteItemById(requestParameters.vaultUuid, requestParameters.itemUuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all items for inside a Vault
         * @param {ItemsApiGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll(requestParameters: ItemsApiGetAllRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Item>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll(requestParameters.vaultUuid, requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the details of an Item
         * @param {ItemsApiGetDetailsByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetailsById(requestParameters: ItemsApiGetDetailsByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FullItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetailsById(requestParameters.vaultUuid, requestParameters.itemUuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an Item
         * @param {ItemsApiUpdateItemDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateItemDetails(requestParameters: ItemsApiUpdateItemDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FullItem>> {
            const fullItem: FullItem = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateItemDetails(requestParameters.vaultUuid, requestParameters.itemUuid, fullItem, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Applies a modified [RFC6902 JSON Patch](https://tools.ietf.org/html/rfc6902) document to an Item or ItemField. This endpoint only supports `add`, `remove` and `replace` operations.  When modifying a specific ItemField, the ItemField\'s ID in the `path` attribute of the operation object: `/fields/{fieldId}` 
         * @summary Update a subset of Item attributes
         * @param {ItemsApiUpdateSubsetAttributesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSubsetAttributes(requestParameters: ItemsApiUpdateSubsetAttributesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FullItem>> {
            const patchInner: Array<PatchInner> = requestParameters.requestBody;
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSubsetAttributes(requestParameters.vaultUuid, requestParameters.itemUuid, patchInner, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ItemsApi - factory interface
 * @export
 */
export const ItemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ItemsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new Item
         * @param {ItemsApiCreateNewItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewItem(requestParameters: ItemsApiCreateNewItemRequest, options?: AxiosRequestConfig): AxiosPromise<FullItem> {
            return localVarFp.createNewItem(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an Item
         * @param {ItemsApiDeleteItemByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemById(requestParameters: ItemsApiDeleteItemByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteItemById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all items for inside a Vault
         * @param {ItemsApiGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(requestParameters: ItemsApiGetAllRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Item>> {
            return localVarFp.getAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the details of an Item
         * @param {ItemsApiGetDetailsByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetailsById(requestParameters: ItemsApiGetDetailsByIdRequest, options?: AxiosRequestConfig): AxiosPromise<FullItem> {
            return localVarFp.getDetailsById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an Item
         * @param {ItemsApiUpdateItemDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItemDetails(requestParameters: ItemsApiUpdateItemDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<FullItem> {
            return localVarFp.updateItemDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Applies a modified [RFC6902 JSON Patch](https://tools.ietf.org/html/rfc6902) document to an Item or ItemField. This endpoint only supports `add`, `remove` and `replace` operations.  When modifying a specific ItemField, the ItemField\'s ID in the `path` attribute of the operation object: `/fields/{fieldId}` 
         * @summary Update a subset of Item attributes
         * @param {ItemsApiUpdateSubsetAttributesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubsetAttributes(requestParameters: ItemsApiUpdateSubsetAttributesRequest, options?: AxiosRequestConfig): AxiosPromise<FullItem> {
            return localVarFp.updateSubsetAttributes(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewItem operation in ItemsApi.
 * @export
 * @interface ItemsApiCreateNewItemRequest
 */
export type ItemsApiCreateNewItemRequest = {
    
    /**
    * The UUID of the Vault to create an Item in
    * @type {string}
    * @memberof ItemsApiCreateNewItem
    */
    readonly vaultUuid: string
    
} & FullItem

/**
 * Request parameters for deleteItemById operation in ItemsApi.
 * @export
 * @interface ItemsApiDeleteItemByIdRequest
 */
export type ItemsApiDeleteItemByIdRequest = {
    
    /**
    * The UUID of the Vault the item is in
    * @type {string}
    * @memberof ItemsApiDeleteItemById
    */
    readonly vaultUuid: string
    
    /**
    * The UUID of the Item to update
    * @type {string}
    * @memberof ItemsApiDeleteItemById
    */
    readonly itemUuid: string
    
}

/**
 * Request parameters for getAll operation in ItemsApi.
 * @export
 * @interface ItemsApiGetAllRequest
 */
export type ItemsApiGetAllRequest = {
    
    /**
    * The UUID of the Vault to fetch Items from
    * @type {string}
    * @memberof ItemsApiGetAll
    */
    readonly vaultUuid: string
    
    /**
    * Filter the Item collection based on Item name using SCIM eq filter
    * @type {string}
    * @memberof ItemsApiGetAll
    */
    readonly filter?: string
    
}

/**
 * Request parameters for getDetailsById operation in ItemsApi.
 * @export
 * @interface ItemsApiGetDetailsByIdRequest
 */
export type ItemsApiGetDetailsByIdRequest = {
    
    /**
    * The UUID of the Vault to fetch Item from
    * @type {string}
    * @memberof ItemsApiGetDetailsById
    */
    readonly vaultUuid: string
    
    /**
    * The UUID of the Item to fetch
    * @type {string}
    * @memberof ItemsApiGetDetailsById
    */
    readonly itemUuid: string
    
}

/**
 * Request parameters for updateItemDetails operation in ItemsApi.
 * @export
 * @interface ItemsApiUpdateItemDetailsRequest
 */
export type ItemsApiUpdateItemDetailsRequest = {
    
    /**
    * The UUID of the Item\'s Vault
    * @type {string}
    * @memberof ItemsApiUpdateItemDetails
    */
    readonly vaultUuid: string
    
    /**
    * The UUID of the Item to update
    * @type {string}
    * @memberof ItemsApiUpdateItemDetails
    */
    readonly itemUuid: string
    
} & FullItem

/**
 * Request parameters for updateSubsetAttributes operation in ItemsApi.
 * @export
 * @interface ItemsApiUpdateSubsetAttributesRequest
 */
export type ItemsApiUpdateSubsetAttributesRequest = {
    /**
    * The UUID of the Vault the item is in
    * @type {string}
    * @memberof ItemsApiUpdateSubsetAttributes
    */
    readonly vaultUuid: string
    /**
    * The UUID of the Item to update
    * @type {string}
    * @memberof ItemsApiUpdateSubsetAttributes
    */
    readonly itemUuid: string
    /**
    * 
    * @type {Array<PatchInner>}
    * @memberof ItemsApiUpdateSubsetAttributes
    */
    readonly requestBody?: Array<PatchInner>
}

/**
 * ItemsApiGenerated - object-oriented interface
 * @export
 * @class ItemsApiGenerated
 * @extends {BaseAPI}
 */
export class ItemsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create a new Item
     * @param {ItemsApiCreateNewItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApiGenerated
     */
    public createNewItem(requestParameters: ItemsApiCreateNewItemRequest, options?: AxiosRequestConfig) {
        return ItemsApiFp(this.configuration).createNewItem(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete an Item
     * @param {ItemsApiDeleteItemByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApiGenerated
     */
    public deleteItemById(requestParameters: ItemsApiDeleteItemByIdRequest, options?: AxiosRequestConfig) {
        return ItemsApiFp(this.configuration).deleteItemById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all items for inside a Vault
     * @param {ItemsApiGetAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApiGenerated
     */
    public getAll(requestParameters: ItemsApiGetAllRequest, options?: AxiosRequestConfig) {
        return ItemsApiFp(this.configuration).getAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the details of an Item
     * @param {ItemsApiGetDetailsByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApiGenerated
     */
    public getDetailsById(requestParameters: ItemsApiGetDetailsByIdRequest, options?: AxiosRequestConfig) {
        return ItemsApiFp(this.configuration).getDetailsById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an Item
     * @param {ItemsApiUpdateItemDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApiGenerated
     */
    public updateItemDetails(requestParameters: ItemsApiUpdateItemDetailsRequest, options?: AxiosRequestConfig) {
        return ItemsApiFp(this.configuration).updateItemDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Applies a modified [RFC6902 JSON Patch](https://tools.ietf.org/html/rfc6902) document to an Item or ItemField. This endpoint only supports `add`, `remove` and `replace` operations.  When modifying a specific ItemField, the ItemField\'s ID in the `path` attribute of the operation object: `/fields/{fieldId}` 
     * @summary Update a subset of Item attributes
     * @param {ItemsApiUpdateSubsetAttributesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApiGenerated
     */
    public updateSubsetAttributes(requestParameters: ItemsApiUpdateSubsetAttributesRequest, options?: AxiosRequestConfig) {
        return ItemsApiFp(this.configuration).updateSubsetAttributes(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
